import IO from "IO"
import { andDo } from "Monad"
import { Wish, bad, fulfill, mapRej } from "Wish"
import { fromMaybe, Just, Nothing } from "Maybe"
import { nth, drop, intercalate, last, reduce } from "List"
import { split } from "String"
import { exec, getArgs, getCurrentPath, getExecutablePath, CommandError } from "System"

pathToDocument :: Wish String String
pathToDocument = pipe(
  map(nth(0)),
  chain(where
    is Just path: of(path)
    is Nothing  : bad("You must give a path to the .mad files to document!")
  )
)(getArgs)

destPath :: String
destPath = ".docs/"

bundlePath :: String
bundlePath = ".docs/bundle.js"

cssTargetPath :: String
cssTargetPath = ".docs/styles/main.css"

htmlTargetPath :: String
htmlTargetPath = ".docs/index.html"

parentPath :: Number -> String -> String
parentPath = (levelsUp) => pipe(
  split("/"),
  drop(levelsUp),
  intercalate("/"),
  reduce(mappend, "")
)

madDocRootPath :: Wish String String
madDocRootPath = map(parentPath(2))(getExecutablePath)

sassExecutablePath :: Wish String String
sassExecutablePath = map(
  (rootPath) => pipe(
    split("/"),
    drop(1),
    last,
    where
      is Just "madlib_modules": `${parentPath(2, rootPath)}/node_modules/.bin/sass`
      is _                    : `${rootPath}/node_modules/.bin/sass`
  )(rootPath),
  madDocRootPath
)

madDocSrcPath :: Wish String String
madDocSrcPath = map(mappend($, "/src"), madDocRootPath)

madDocMainPath :: Wish String String
madDocMainPath = map(mappend($, "/Main.mad"), madDocSrcPath)

sassPath :: Wish String String
sassPath = map(mappend($, "/styles/main.scss"), madDocSrcPath)

htmlPath :: Wish String String
htmlPath = map(mappend($, "/index.html"), madDocSrcPath)

documentationPath :: Wish String String
documentationPath = map(mappend($, "/documentation.json"), madDocSrcPath)

generateJson :: String -> Wish String String
generateJson = pipe(
  (path) => map((docPath) => <path, docPath>, documentationPath),
  chain((paths) => pipe(
    where is <path, docPath>: `madlib doc -i ${path} > ${docPath}`,
    exec,
    mapRej(where is CommandError _ err:
      `An error occured while generating the docs, here is the error from madlib:\n${err}`
    ),
    map((_) => where(paths) is <_, docPath>:
      `Documentation built and saved in ${docPath}`)
  )(paths))
)

buildDocumentation :: Wish String String
buildDocumentation = pipe(
  chain((mainPath) => exec(`madlib compile -i ${mainPath} --target browser --bundle -o .docs/bundle.js`) |> mapRej(where is CommandError _ err: err)),
  andDo(sassPath),
  chain((src) => chain((sass) =>
    exec(`${sass} ${src} ${cssTargetPath}`) |> mapRej(where is CommandError _ err: err)
  )(sassExecutablePath)),
  andDo(htmlPath),
  chain(pipe(
    (src) => exec(`cp ${src} ${htmlTargetPath}`),
    mapRej(where is CommandError _ err: err
  ))),
  andDo(map(mappend($, "/.docs"), getCurrentPath)),
  map((outputPath) => `Documentation built and available in the folder '${outputPath}'`)
)(madDocMainPath)

main :: Wish String String
main = chain(
  pipe(generateJson, andDo(buildDocumentation)),
  pathToDocument
)


fulfill(IO.log, (path) => IO.log(`Running documentation generation for the madlib modules in '${path}'`), pathToDocument)

fulfill(IO.log, IO.log, main)

