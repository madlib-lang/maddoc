import { test, assertEquals, AssertionError } from "TestTools"
import { exec } from "System"
import { exists } from "FileSystem"
import { chainRej, mapRej, fulfill, Wish } from "Wish"
import { andDo } from "Monad"
import IO from "IO"

import { pathToDocument } from "./Build"


assertFileExists :: String -> Wish AssertionError String
assertFileExists = (filePath) => pipe(
  exists,
  mapRej((_) => AssertionError("OK", `${filePath} not found`))
)(filePath)

test("MadDoc cli should work", (_) => pipe(
  mapRej((_) => AssertionError("OK", "maddoc exited with non 0 code")),
  andDo(assertFileExists("./src/documentation.json")),
  andDo(assertFileExists(".docs/bundle.js")),
  andDo(assertFileExists(".docs/index.html")),
  andDo(assertFileExists(".docs/styles/main.css"))
)(exec("COVERAGE_MODE=off madlib run ./src/CLI/Main.mad src")))

test("pathToDocument - arg is set", (_) => pipe(
  pathToDocument,
  mapRej((_) => AssertionError(false, true)),
  chain(assertEquals($, "/path/to/document"))
)({ getArgs: of(["/path/to/document"]) }))

test("pathToDocument - arg is not set", (_) => pipe(
  pathToDocument,
  chainRej(assertEquals($, "You must give a path to the .mad files to document!"))
)({ getArgs: of([]) }))
