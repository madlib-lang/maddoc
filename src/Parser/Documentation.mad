import type { Maybe } from "Maybe"

import Json from "Json/Parse"
import { Just, Nothing } from "Maybe"



export alias Instance = {
  constraints :: String,
  declaration :: String,
  description :: String,
  example :: String,
  since :: String,
}

export alias Interface = {
  constraints :: String,
  description :: String,
  example :: String,
  methods :: List String,
  name :: String,
  since :: String,
  vars :: String,
}

export alias Alias = {
  aliasedType :: String,
  description :: String,
  example :: String,
  name :: String,
  params :: String,
  since :: String,
}

export alias Type = {
  constructors :: List String,
  description :: String,
  example :: String,
  name :: String,
  params :: String,
  since :: String,
}

export alias Expression = {
  description :: String,
  example :: String,
  name :: String,
  since :: String,
  typing :: String,
}

export type Targeted a = BothTargets(a, a) | JSTarget(a) | LLVMTarget(a) | InvalidTarget


getName :: Targeted { ...base, name :: String } -> String
export getName = where {
  BothTargets(a, _) =>
    a.name

  JSTarget(a) =>
    a.name

  LLVMTarget(a) =>
    a.name

  InvalidTarget =>
    "Invalid Target"
}


hasJSTarget :: Targeted a -> Boolean
export hasJSTarget = (targeted) => where(targeted) {
  BothTargets(_, _) =>
    true

  JSTarget(_) =>
    true

  _ =>
    false
}

export alias Module = {
  aliases :: List Alias,
  description :: String,
  expressions :: List (Targeted Expression),
  instances :: List Instance,
  interfaces :: List Interface,
  name :: String,
  path :: String,
  typeDeclarations :: List Type,
}

export alias Documentation = List Module

makeInstance :: String -> String -> String -> String -> String -> Instance
makeInstance = (declaration, constraints, description, since, example) => (
  { declaration, constraints, description, since, example }
)

makeInterface :: String
  -> String
  -> String
  -> List String
  -> String
  -> String
  -> String
  -> Interface
export makeInterface = (name, vars, constraints, methods, description, since, example) => (
  { name, vars, constraints, methods, description, since, example }
)

makeAlias :: String -> String -> String -> String -> String -> String -> Alias
export makeAlias = (name, params, aliasedType, description, since, example) => (
  { name, params, aliasedType, description, since, example }
)

makeType :: String -> String -> List String -> String -> String -> String -> Type
export makeType = (name, params, constructors, description, since, example) => (
  { name, params, constructors, description, since, example }
)

makeExpression :: String -> String -> String -> String -> String -> Expression
export makeExpression = (name, description, typing, since, example) => (
  { name, description, typing, since, example }
)

makeTargeted :: Maybe a -> Maybe a -> Targeted a
export makeTargeted = (maybeJS, maybeLLVM) => where(#[maybeJS, maybeLLVM]) {
  #[Just(js), Just(llvm)] =>
    BothTargets(js, llvm)

  #[Just(js), Nothing] =>
    JSTarget(js)

  #[Nothing, Just(llvm)] =>
    LLVMTarget(llvm)

  _ =>
    InvalidTarget
}

makeModule :: String
  -> String
  -> String
  -> List (Targeted Expression)
  -> List Type
  -> List Alias
  -> List Interface
  -> List Instance
  -> Module
export makeModule = (
  path,
  name,
  description,
  expressions,
  typeDeclarations,
  aliases,
  interfaces,
  instances
) => ({ path, name, description, expressions, typeDeclarations, aliases, interfaces, instances })



expressionParser :: Json.Parser Expression
export expressionParser = Json.map5(
  makeExpression,
  Json.field("name", Json.string),
  Json.field("description", Json.string),
  Json.field("type", Json.string),
  Json.field("since", Json.string),
  Json.field("example", Json.string),
)


parser :: Json.Parser Documentation
export parser = Json.field(
  "modules",
  Json.list(
    Json.map8(
      makeModule,
      Json.field("path", Json.string),
      Json.field("moduleName", Json.string),
      Json.field("description", Json.string),
      Json.field(
        "expressions",
        Json.list(
          Json.map2(
            makeTargeted,
            Json.maybe(Json.field("js", expressionParser)),
            Json.maybe(Json.field("llvm", expressionParser)),
          ),
        ),
      ),
      Json.field(
        "typeDeclarations",
        Json.list(
          Json.map6(
            makeType,
            Json.path(["js", "name"], Json.string),
            Json.path(["js", "params"], Json.string),
            Json.path(["js", "constructors"], Json.list(Json.string)),
            Json.path(["js", "description"], Json.string),
            Json.path(["js", "since"], Json.string),
            Json.path(["js", "example"], Json.string),
          ),
        ),
      ),
      Json.field(
        "aliases",
        Json.list(
          Json.map6(
            makeAlias,
            Json.path(["js", "name"], Json.string),
            Json.path(["js", "params"], Json.string),
            Json.path(["js", "aliasedType"], Json.string),
            Json.path(["js", "description"], Json.string),
            Json.path(["js", "since"], Json.string),
            Json.path(["js", "example"], Json.string),
          ),
        ),
      ),
      Json.field(
        "interfaces",
        Json.list(
          Json.map7(
            makeInterface,
            Json.path(["js", "name"], Json.string),
            Json.path(["js", "vars"], Json.string),
            Json.path(["js", "constraints"], Json.string),
            Json.path(["js", "methods"], Json.list(Json.string)),
            Json.path(["js", "description"], Json.string),
            Json.path(["js", "since"], Json.string),
            Json.path(["js", "example"], Json.string),
          ),
        ),
      ),
      Json.field(
        "instances",
        Json.list(
          Json.map5(
            makeInstance,
            Json.path(["js", "declaration"], Json.string),
            Json.path(["js", "constraints"], Json.string),
            Json.path(["js", "description"], Json.string),
            Json.path(["js", "since"], Json.string),
            Json.path(["js", "example"], Json.string),
          ),
        ),
      ),
    ),
  ),
)
