import Json from "Json"

export alias Instance = {
  declaration :: String,
  constraints :: String,
  description  :: String,
  since        :: String,
  example      :: String
}

export alias Interface = {
  name        :: String,
  vars        :: String,
  constraints :: String,
  methods     :: List String,
  description  :: String,
  since        :: String,
  example      :: String
}

export alias Alias = {
  name        :: String,
  params      :: String,
  aliasedType :: String,
  description  :: String,
  since        :: String,
  example      :: String
}

export alias Type = {
  name         :: String,
  params       :: String,
  constructors :: List String,
  description  :: String,
  since        :: String,
  example      :: String
}

export alias Expression = {
  name        :: String,
  description :: String,
  typing      :: String,
  since       :: String,
  example     :: String
}

export alias Module = {
  path             :: String,
  name             :: String,
  description      :: String,
  expressions      :: List Expression,
  typeDeclarations :: List Type,
  aliases          :: List Alias,
  interfaces       :: List Interface,
  instances        :: List Instance
}

export alias Documentation = List Module

makeInstance :: String -> String -> String -> String -> String -> Instance
makeInstance = (declaration, constraints, description, since, example) =>
  ({ declaration, constraints, description, since, example })

makeInterface :: String -> String -> String -> List String -> String -> String -> String -> Interface
makeInterface = (name, vars, constraints, methods, description, since, example) =>
  ({ name, vars, constraints, methods, description, since, example })

makeAlias :: String -> String -> String -> String -> String -> String -> Alias
makeAlias = (name, params, aliasedType, description, since, example) =>
  ({ name, params, aliasedType, description, since, example })

makeType :: String -> String -> List String -> String -> String -> String -> Type
makeType = (name, params, constructors, description, since, example) =>
  ({ name, params, constructors, description, since, example })

makeExpression :: String -> String -> String -> String -> String -> Expression
makeExpression = (name, description, typing, since, example) => ({
  name, description, typing, since, example
})

makeModule :: String
  -> String
  -> String
  -> List Expression
  -> List Type
  -> List Alias
  -> List Interface
  -> List Instance
  -> Module
makeModule = (path, name, description, expressions, typeDeclarations, aliases, interfaces, instances) => ({
  path,
  name,
  description,
  expressions,
  typeDeclarations,
  aliases,
  interfaces,
  instances
})

parser :: Json.Parser Documentation
export parser = Json.field("modules", Json.list(
  Json.map8(
    makeModule,
    Json.field("path", Json.string),
    Json.field("moduleName", Json.string),
    Json.field("description", Json.string),
    Json.field("expressions", Json.list(
      Json.map5(
        makeExpression,
        Json.field("name", Json.string),
        Json.field("description", Json.string),
        Json.field("type", Json.string),
        Json.field("since", Json.string),
        Json.field("example", Json.string)
      )
    )),
    Json.field("typeDeclarations", Json.list(
      Json.map6(
        makeType,
        Json.field("name", Json.string),
        Json.field("params", Json.string),
        Json.field("constructors", Json.list(Json.string)),
        Json.field("description", Json.string),
        Json.field("since", Json.string),
        Json.field("example", Json.string)
      )
    )),
    Json.field("aliases", Json.list(
      Json.map6(
        makeAlias,
        Json.field("name", Json.string),
        Json.field("params", Json.string),
        Json.field("aliasedType", Json.string),
        Json.field("description", Json.string),
        Json.field("since", Json.string),
        Json.field("example", Json.string)
      )
    )),
    Json.field("interfaces", Json.list(
      Json.map7(
        makeInterface,
        Json.field("name", Json.string),
        Json.field("vars", Json.string),
        Json.field("constraints", Json.string),
        Json.field("methods", Json.list(Json.string)),
        Json.field("description", Json.string),
        Json.field("since", Json.string),
        Json.field("example", Json.string)
      )
    )),
    Json.field("instances", Json.list(
      Json.map5(
        makeInstance,
        Json.field("declaration", Json.string),
        Json.field("constraints", Json.string),
        Json.field("description", Json.string),
        Json.field("since", Json.string),
        Json.field("example", Json.string)
      )
    ))
  )
))
