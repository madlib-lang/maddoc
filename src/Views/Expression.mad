import type { Element } from "MadUI"

import type { Expression, Targeted } from "@/Parser/Documentation"
import type { State, Target } from "@/State"
import type { TargetInfo } from "@/TargetInfo"

import { className, key, li, text } from "MadUI"

import { Description } from "@/Views/Description"
import { Etiquette } from "@/Views/Etiquette"
import { Example } from "@/Views/Example"
import { Since } from "@/Views/Since"
import { TargetedItem } from "@/Views/TargetedItem"
import { Title } from "@/Views/Title"
import { Typing } from "@/Views/Typing"



ExpressionView :: String -> TargetInfo -> Expression -> Element State
ExpressionView = (moduleName, targetInfo, definition) =>
  <li
    className={`definition${targetInfo.isAvailable ? "" : " definition--greyed-out"}`}
    key={`${moduleName}-${definition.name}`}
  >
    {Etiquette("Function")}
    {Title(definition.name, targetInfo, moduleName)}
    {Typing(definition)}
    {Since(definition)}
    {Description(definition)}
    {Example(definition)}
  </li>


Expression :: Target -> String -> Targeted Expression -> Element State
export Expression = (target, moduleName, definition) => TargetedItem(
  target,
  definition,
  ExpressionView(moduleName),
)
