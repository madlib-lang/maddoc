import type { Element } from "MadUI"

import type { Type } from "@/Parser/Documentation"
import type { State } from "@/State"

import { first, length } from "List"
import { className, div, li, span, text } from "MadUI"
import { fromMaybe } from "Maybe"

import { Description } from "./Description"
import { Etiquette } from "./Etiquette"
import { Example } from "./Example"
import { Since } from "./Since"
import { Title } from "./Title"



Type :: String -> Type -> Element State
export Type = (moduleName, typeDefinition) => {
  constructors = typeDefinition.constructors
  manyCtors = length(constructors) > 1

  renderedConstructors = manyCtors
    ? ConstructorsView("=", constructors)
    : [
      <span className="definition__constructor">
        <span className="highlight">
          = 
        </span>
        <span>
          {fromMaybe("???", first(constructors))}
        </span>
      </span>,
    ]

  return (
    <li className="definition">
      {...[
        Etiquette("Type"),
        Title(
          typeDefinition.name,
          { hasJS: false, hasLLVM: false, isAvailable: false },
          moduleName,
        ),
      ]}
      <div className="definition__adt">
        <span className="highlight">
          type
        </span>
        <span>
          {typeDefinition.name}
          {typeDefinition.params}
        </span>
        <span className="definition__constructors">
          {...renderedConstructors}
        </span>
      </div>
      {...[Since(typeDefinition), Description(typeDefinition), Example(typeDefinition)]}
    </li>
  )
}

ConstructorsView :: String -> List String -> List (Element a)
ConstructorsView = (separator, items) => where(items) {
  [ctor, ...more] =>
    [ConstructorView(separator, ctor), ...ConstructorsView("|", more)]

  [ctor] =>
    [ConstructorView(separator, ctor)]

  [] =>
    []
}

ConstructorView :: String -> String -> Element a
ConstructorView = (separator, constructor) =>
  <div className="definition__constructor">
    <span className="highlight">
      {separator}
    </span>
    <span>
      {constructor}
    </span>
  </div>
