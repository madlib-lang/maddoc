import type { FilePath } from "FilePath/Posix"

import List from "List"
import { Just, Nothing } from "Maybe"
import { always, any, equals, ifElse } from "Function"
import { drop, split, toLower, length } from "String"
import { isRootPathOf, canonicalizePath } from "FilePath/Posix"
import {} from "Compare"

import type { State } from "@/State"
import type {
  Module,
  Expression,
  Alias,
  Interface,
  Instance,
  Type
} from "@/Parser/Documentation"



export type PathResult
  = ModuleResult(List Module)
  | ExpressionResult(String, Expression)
  | TypeResult(String, Type)
  | AliasResult(String, Alias)
  | InterfaceResult(String, Interface)
  | InstanceResult(String, Instance)
  | NotFound


concatMany :: List (List a) -> List a
concatMany = (lists) => List.reduce(List.concat, [], lists)


filterByPath :: String -> List Module -> List Module
filterByPath = (path) => {
  canPath = canonicalizePath(path)

  return List.filter((module) =>
    pipe(
      .name,
      toLower,
      ifElse(
        isRootPathOf(drop(1, toLower(canPath))),
        always(
          !List.isEmpty(module.expressions)
          || !List.isEmpty(module.typeDeclarations)
          || !List.isEmpty(module.aliases)
          || !List.isEmpty(module.interfaces)
          || !List.isEmpty(module.instances)
        ),
        pipe(
          always(concatMany([
            map(.name, module.expressions),
            map(.name, module.typeDeclarations),
            map(.name, module.aliases),
            map(.name, module.interfaces),
            map(.declaration, module.instances)
          ])),
          map(pipe(mconcat(`${module.name}/`), toLower)),
          any(isRootPathOf(drop(1, toLower(canPath))))
        )
      )
    )(module)
  )
}


getModulesToShow :: State -> List Module
export getModulesToShow = (state) => pipe(
  .modules,
  filterByPath(state.path)
)(state)

isItemView :: String -> List Module -> Boolean
isItemView = (path) => ifElse(
  pipe(List.length, equals(1)),
  pipe(
    List.first,
    where {
      Just(m) => length(canonicalizePath(path)) > length(`/${m.name}`)
      Nothing => false
    }
  ),
  always(false)
)

tryItemByKind :: (a -> b -> PathResult)
  -> (b -> String)
  -> List b
  -> FilePath
  -> { ...module, name :: a } -> PathResult
tryItemByKind = (constructor, getName, items, path, module) => pipe(
  List.find((e) => Just(getName(e)) == List.last(split("/", path))),
  where {
    Just(found) => constructor(module.name, found)
    Nothing    => NotFound
  }
)(items)


alias Finder = FilePath -> Module -> PathResult

_findItem :: List Finder -> FilePath -> Module -> PathResult
_findItem = (finders, path, module) => where(finders) {
  [try, ...others] =>
    where(try(path, module)) {
      NotFound => _findItem(others, path, module)
      found => found
    }

  [] =>
    NotFound
}

findItem :: FilePath -> Module -> PathResult
findItem = (path, module) => _findItem([
  tryItemByKind(ExpressionResult, .name, module.expressions),
  tryItemByKind(TypeResult, .name, module.typeDeclarations),
  tryItemByKind(AliasResult, .name, module.aliases),
  tryItemByKind(InterfaceResult, .name, module.interfaces),
  tryItemByKind(InstanceResult, .declaration, module.instances)
], path, module)


processPath :: State -> PathResult
export processPath = (state) => pipe(
  getModulesToShow,
  ifElse(
    isItemView(state.path),
    pipe(
      List.first,
      where { Just(m) => findItem(state.path, m) }
    ),
    ModuleResult
  )
)(state)
