import Json from "Json"
import String from "String"
import { Right } from "Either"
import docJson from "@/documentation.json"
import type { Element } from "MadUI"
import {
  UrlEvent,
  div,
  h2,
  className,
  onUrlChanged,
  syncAction,
  getUrl,
  text,
  empty,
  p,
  link,
  to,
  render,
  main,
  ul
} from "MadUI"
import URL from "URL"

import type { State } from "@/State"

import { Expression } from "@/Views/Expression"
import { SideMenu } from "@/Views/SideMenu"
import { Header } from "@/Views/Header"
import { Breadcrumbs } from "@/Views/Breadcrumbs"
import { Type } from "@/Views/Type"
import { Alias } from "@/Views/Alias"
import { Interface } from "@/Views/Interface"
import { Instance } from "@/Views/Instance"

import type { Module } from "@/Parser/Documentation"
import { parser } from "@/Parser/Documentation"

import type { PathResult } from "@/PathResolver"
import {
  processPath,
  getModulesToShow,
  ExpressionResult,
  TypeResult,
  AliasResult,
  InterfaceResult,
  InstanceResult,
  ModuleResult
} from "@/PathResolver"

import { renderMarkdown } from "@/Markdown"


parsedDocumentation = Json.parse(parser, docJson)

initialState :: State
initialState = where(parsedDocumentation) {
  Right(modules) =>
    {
      modules,
      search: "",
      path: URL.decode(getUrl(()))
    }
}


ModuleView :: Module -> Element
ModuleView = (module) =>
  <div className="module">
    <h2 className="module__title">
      <link to={`/${module.name}`}>{module.name}</link>
    </h2>
    {
      String.isEmpty(module.description)
        ? <empty />
        : <p className="module__description">{renderMarkdown(module.description)}</p>
    }
    <ul className="content__items">
      {map(Type(module.name), module.typeDeclarations)}
      {map(Alias(module.name), module.aliases)}
      {map(Interface(module.name), module.interfaces)}
      {map(Instance(module.name), module.instances)}
      {map(Expression(module.name), module.expressions)}
    </ul>
  </div>


ContentView :: PathResult -> Element
ContentView = where {
  ModuleResult(modules) =>
    <div>{map(ModuleView, modules)}</div>

  ExpressionResult(moduleName, exp) =>
    <ul className="content__items">{Expression(moduleName, exp)}</ul>

  TypeResult(moduleName, t) =>
    <ul className="content__items">{Type(moduleName, t)}</ul>

  AliasResult(moduleName, t) =>
    <ul className="content__items">{Alias(moduleName, t)}</ul>

  InterfaceResult(moduleName, t) =>
    <ul className="content__items">{Interface(moduleName, t)}</ul>

  InstanceResult(moduleName, t) =>
    <ul className="content__items">{Instance(moduleName, t)}</ul>
}


DocApp :: State -> Element
DocApp = (state) => {
  modulesInPath = getModulesToShow(state)
  pathResult = processPath(state)
  return (
    <div className="documentation">
      {Header(())}
      {SideMenu(state.search, state.modules)}
      <main className="documentation__content">
        {Breadcrumbs(state)}
        {ContentView(pathResult)}
      </main>
    </div>
  )
}

onUrlChanged(syncAction((state, event) => where(event) {
  UrlEvent({ url }) => { ...state, path: URL.decode(url) }
}))

render(DocApp, initialState, "app")
