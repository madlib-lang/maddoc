import {} from "Number"
import { len, slice, nth, filter, last, flatten, concat, first } from "List"
import { Wish, after, bad, good, mapRej } from "Wish"
import { fst, snd } from "Tuple"
import { fromMaybe } from "Maybe"
import J from "Json"
import { Right, Left } from "Either"
import { lines, split } from "String"
import docJson from "./documentation.json"
import {
  Element,
  Action,
  View,
  id,
  h1,
  h2,
  h4,
  onInput,
  button,
  div,
  span,
  input,
  className,
  ClickEvent,
  onClick,
  onMouseOver,
  onMouseOut,
  text,
  value,
  placeholder,
  InputEvent,
  render,
  inputType,
  li,
  p,
  header,
  main,
  ul
} from "MadUI"
import IO from "IO"
import { always } from "Function"

type Definition = Definition String String String String String

type TypeDefinition = TypeDefinition String String (List String)

type AliasDefinition = AliasDefinition String String String

type InterfaceDefinition = InterfaceDefinition String String String (List String)

type InstanceDefinition = InstanceDefinition String String

type ModuleDocumentation = ModuleDocumentation String String (List Definition) (List TypeDefinition) (List AliasDefinition) (List InterfaceDefinition) (List InstanceDefinition)

alias DocumentationData = List ModuleDocumentation

parser :: J.Parser DocumentationData
export parser = J.field("modules", J.list(
  J.map7(
    ModuleDocumentation,
    J.field("path", J.string),
    J.field("description", J.string),
    J.field("expressions", J.list(
      J.map5(
        Definition,
        J.field("name", J.string),
        J.field("description", J.string),
        J.field("type", J.string),
        J.field("since", J.string),
        J.field("example", J.string)
      )
    )),
    J.field("typeDeclarations", J.list(
      J.map3(
        TypeDefinition,
        J.field("name", J.string),
        J.field("params", J.string),
        J.field("constructors", J.list(J.string))
      )
    )),
    J.field("aliases", J.list(
      J.map3(
        AliasDefinition,
        J.field("name", J.string),
        J.field("params", J.string),
        J.field("aliasedType", J.string)
      )
    )),
    J.field("interfaces", J.list(
      J.map4(
        InterfaceDefinition,
        J.field("name", J.string),
        J.field("vars", J.string),
        J.field("constraints", J.string),
        J.field("methods", J.list(J.string))
      )
    )),
    J.field("instances", J.list(
      J.map2(
        InstanceDefinition,
        J.field("declaration", J.string),
        J.field("constraints", J.string)
      )
    ))
  )
))

parsedDocumentation = J.parse(parser, docJson)


sort :: (a -> a -> Number) -> List a -> List a
sort = (fn, xs) => #- xs.sort(fn) -#

deriveModuleName :: String -> String
deriveModuleName = pipe(
  split("/"),
  last,
  fromMaybe("???"),
  split("."),
  nth(0),
  fromMaybe("")
)

getDocItemName :: DocItem -> String
getDocItemName = where
  is ExpressionItem _ (Definition name _ _ _ _)       : name
  is TypeItem _ (TypeDefinition name _ _)             : name
  is AliasItem _ (AliasDefinition name _ _)           : name
  is InterfaceItem _ (InterfaceDefinition name _ _ _) : name
  is InstanceItem _ (InstanceDefinition name _)       : name

type DocItem
  = ExpressionItem String Definition
  | TypeItem String TypeDefinition
  | AliasItem String AliasDefinition
  | InterfaceItem String InterfaceDefinition
  | InstanceItem String InstanceDefinition

alias State = { docItems :: List DocItem, search :: String }

initialState :: State
initialState = where(parsedDocumentation)
  is Right modules: pipe(
    map(
      where is ModuleDocumentation path _ exps typeDefs aliasDefs interfaces instances:
        [
          ...map((exp) => ExpressionItem(deriveModuleName(path), exp), exps),
          ...map((typeDef) => TypeItem(deriveModuleName(path), typeDef), typeDefs),
          ...map((aliasDef) => AliasItem(deriveModuleName(path), aliasDef), aliasDefs),
          ...map((interfac) => InterfaceItem(deriveModuleName(path), interfac), interfaces),
          ...map((inst) => InstanceItem(deriveModuleName(path), inst), instances)
        ]
    ),
    flatten,
    sort((a, b) => #- getDocItemName(a) > getDocItemName(b) ? 1 : -1 -#),
    (docItems) => ({ docItems: docItems, search: "" })
  )(modules)


getDefName :: Definition -> String
getDefName = where
  is Definition name _ _ _ _: name
  is _: ""

getDefType :: Definition -> String
getDefType = where
  is Definition _ _ tipe _ _: tipe
  is _: ""

getDefSince :: Definition -> String
getDefSince = where
  is Definition _ _ _ since _: since
  is _: ""

getDefExample :: Definition -> String
getDefExample = where
  is Definition _ _ _ _ example: example
  is _: ""

getDefDescription :: Definition -> String
getDefDescription = where
  is Definition _ desc _ _ _: desc
  is _: ""

getTypeDefName :: TypeDefinition -> String
getTypeDefName = where
  is TypeDefinition name _ _: name
  is _: ""

getTypeDefParams :: TypeDefinition -> String
getTypeDefParams = where
  is TypeDefinition _ params _: params
  is _: ""

getTypeDefConstructors :: TypeDefinition -> List String
getTypeDefConstructors = where
  is TypeDefinition _ _ ctors: ctors
  is _: []


getAliasName :: AliasDefinition -> String
getAliasName = where
  is AliasDefinition n _ _: n
  is _: ""

getAliasParams :: AliasDefinition -> String
getAliasParams = where
  is AliasDefinition _ "" _: ""
  is AliasDefinition _ params _: " " ++ params
  is _: ""

getAliasType :: AliasDefinition -> String
getAliasType = where
  is AliasDefinition _ _ tipe: tipe
  is _: ""


getInterfaceName :: InterfaceDefinition -> String
getInterfaceName = where
  is InterfaceDefinition n _ _ _: n
  is _: ""

getInterfaceVars :: InterfaceDefinition -> String
getInterfaceVars = where
  is InterfaceDefinition _ vars _ _: vars
  is _: ""

getInterfaceConstraints :: InterfaceDefinition -> String
getInterfaceConstraints = where
  is InterfaceDefinition _ _ constraints _: constraints
  is _: ""

getInterfaceMethods :: InterfaceDefinition -> List String
getInterfaceMethods = where
  is InterfaceDefinition _ _ _ methods: methods
  is _: []


getInstanceDeclaration :: InstanceDefinition -> String
getInstanceDeclaration = where
  is InstanceDefinition decl _: decl
  is _: ""

getInstanceConstraints :: InstanceDefinition -> String
getInstanceConstraints = where
  is InstanceDefinition _ constraints: constraints
  is _: ""

handleInput :: Action State
handleInput = (state, event) => where(event)
  is InputEvent e: [of(always({ ...state, search: e.target.value }))]

DocApp :: View State
DocApp = (state) => {
  filteredItems = #- state.docItems.filter((s) => getDocItemName(s).match(state.search)) -#

  return (
    <div className="documentation">
      <header className="documentation__header">
        <input inputType="text" placeholder="What are you looking for?" className="search-field" onInput={handleInput} />
      </header>
      <main className="documentation__content">
        {DocItemList(filteredItems)}
      </main>
    </div>
  )
}

DocItemList :: View (List DocItem)
DocItemList = (docItems) => <ul>{map(DocItem, docItems)}</ul>

DocItem :: View DocItem
DocItem = (docItem) => where(docItem)
  is ExpressionItem _ _: ExpressionItemView(docItem)
  is TypeItem _ _      : TypeItemView(docItem)
  is AliasItem _ _     : AliasItemView(docItem)
  is InterfaceItem _ _ : InterfaceItemView(docItem)
  is InstanceItem _ _  : InstanceItemView(docItem)

ExpressionItemView :: View DocItem
ExpressionItemView = (docItem) => {
  moduleName = where(docItem) is ExpressionItem n _  : n
  definition = where(docItem) is ExpressionItem _ def: def
  descriptionParagraphs = pipe(
    getDefDescription,
    lines,
    map((desc) => <p>{desc}</p>)
  )(definition)

  return (
    <li className="definition">
      <div className="definition__etiquette">{`Function`}</div>
      <h2 className="definition__title">
        <span>{`${getDefName(definition)}`}</span>
        <span className="definition__module">{moduleName}</span>
      </h2>
      <p><span className="definition__type">{getDefType(definition)}</span></p>
      <p className="definition__since">
        Added in v{getDefSince(definition)}
      </p>
      <div className="definition__description">{descriptionParagraphs}</div>
      <p className={getDefExample(definition) == "" ? "" : "definition__example"}>
        {Example(getDefExample(definition))}
      </p>
    </li>
  )
}

AliasItemView :: View DocItem
AliasItemView = (docItem) => {
  moduleName  = where(docItem) is AliasItem n _  : n
  aliasDef    = where(docItem) is AliasItem _ def: def
  aliasedType = getAliasType(aliasDef)

  return (
    <li className="definition">
      <div className="definition__etiquette">Alias</div>
      <h2 className="definition__title">
        <span>{getAliasName(aliasDef)}</span>
        <span className="definition__module">{moduleName}</span>
      </h2>
      <div className="definition__adt">
        <span className="highlight">alias</span>
        <span> {getAliasName(aliasDef)}{getAliasParams(aliasDef)}</span>
        <span className="definition__constructors">
          <span className="definition__constructor">
            <span className="highlight"> = </span>
            <span>{aliasedType}</span>
          </span>
        </span>
      </div>
    </li>
  )
}

InterfaceItemView :: View DocItem
InterfaceItemView = (docItem) => {
  moduleName   = where(docItem) is InterfaceItem n _  : n
  interfaceDef = where(docItem) is InterfaceItem _ def: def
  methods      = getInterfaceMethods(interfaceDef)
  constraints  = getInterfaceConstraints(interfaceDef)
  constraintElements =
    if (constraints != "") {[
        <span>{constraints}</span>,
        <span className="highlight">{` => `}</span>
    ]} else { [] }

  return (
    <li className="definition">
      <div className="definition__etiquette">Interface</div>
      <h2 className="definition__title">
        <span>{getInterfaceName(interfaceDef)}</span>
        <span className="definition__module">{moduleName}</span>
      </h2>
      <div className="definition__interface">
        <span className="highlight">interface </span>
        <span>{constraintElements}</span>
        <span>{getInterfaceName(interfaceDef)} {getInterfaceVars(interfaceDef)}</span>
        <span className="highlight">{` {`}</span>
        <div>{map((method) => <div>  {method}</div>, methods)}</div>
        <span className="highlight">{`}`}</span>
      </div>
    </li>
  )
}

InstanceItemView :: View DocItem
InstanceItemView = (docItem) => {
  moduleName   = where(docItem) is InstanceItem n _  : n
  instanceDef  = where(docItem) is InstanceItem _ def: def
  constraints  = getInstanceConstraints(instanceDef)
  constraintElements =
    if (constraints != "") {[
        <span>{constraints}</span>,
        <span className="highlight">{` => `}</span>
    ]} else { [] }

  return (
    <li className="definition">
      <div className="definition__etiquette">Instance</div>
      <h2 className="definition__title">
        <span>{getInstanceDeclaration(instanceDef)}</span>
        <span className="definition__module">{moduleName}</span>
      </h2>
      <div className="definition__interface">
        <span className="highlight">instance </span>
        <span>{constraintElements}</span>
        <span>{getInstanceDeclaration(instanceDef)}</span>
      </div>
    </li>
  )
}

TypeItemView :: View DocItem
TypeItemView = (docItem) => {
  moduleName     = where(docItem) is TypeItem n _  : n
  typeDefinition = where(docItem) is TypeItem _ def: def
  constructors   = getTypeDefConstructors(typeDefinition)
  manyCtors      = len(constructors) > 1

  renderedConstructors = manyCtors
    ? ConstructorsView("=", constructors)
    : [
      <span className="definition__constructor">
        <span className="highlight">= </span>
        <span>{fromMaybe("???", first(constructors))}</span>
      </span>
    ]

  return (
    <li className="definition">
      <div className="definition__etiquette">Type</div>
      <h2 className="definition__title">
        <span>{getTypeDefName(typeDefinition)}</span>
        <span className="definition__module">{moduleName}</span>
      </h2>
      <div className="definition__adt">
        <span className="highlight">type</span>
        <span> {getTypeDefName(typeDefinition)} {getTypeDefParams(typeDefinition)}</span>
        <span className="definition__constructors">{renderedConstructors}</span>
      </div>
    </li>
  )
}

ConstructorsView :: String -> (List String) -> List Element
ConstructorsView = (separator, items) => where(items)
  is [ctor, ...more]: [ConstructorView(separator, ctor), ...ConstructorsView("|", more)]
  is [ctor]         : [ConstructorView(separator, ctor)]
  is []             : []

ConstructorView :: String -> View String
ConstructorView = (separator, constructor) =>
  <div className="definition__constructor">
    <span className="highlight">  {separator}</span>
    <span> {constructor}</span>
  </div>


Example :: View String
Example = (example) => {
  lineList = split("\n", example)

  return (
    <div>
      {map((l) => <div className="example__line">{l}</div>, lineList)}
    </div>
  )
}

render(DocApp, initialState, "app")
