import L from "List"
import J from "Json"
import { Right } from "Either"
import docJson from "./documentation.json"
import {
  Action,
  Element,
  UrlEvent,
  div,
  h2,
  className,
  onUrlChanged,
  syncAction,
  getUrl,
  text,
  p,
  link,
  to,
  InputEvent,
  render,
  main,
  ul
} from "MadUI"
import { always } from "Function"
import URL from "URL"

import {
  State
} from "./State"

import { Expression } from "./Views/Expression"
import { SideMenu } from "./Views/SideMenu"
import { Header } from "./Views/Header"
import { Breadcrumbs } from "./Views/Breadcrumbs"
import { Type } from "./Views/Type"
import { Alias } from "./Views/Alias"
import { Interface } from "./Views/Interface"
import { Instance } from "./Views/Instance"

import {
  parser,
  Module,
  Expression
} from "./Parser/Documentation"

import {
  processPath,
  getModulesToShow,
  ExpressionResult,
  TypeResult,
  AliasResult,
  InterfaceResult,
  InstanceResult,
  ModuleResult,
  PathResult
} from "./PathResolver"


parsedDocumentation = J.parse(parser, docJson)

initialState :: State
initialState = where(parsedDocumentation)
  is Right modules: {
    modules,
    search: "",
    path: URL.decode(getUrl(()))
  }


handleInput :: Action State
handleInput = (state, event) => where(event)
  is InputEvent e: [of(always({ ...state, search: e.target.value }))]


ModuleView :: Module -> Element
ModuleView = (module) =>
  <div className="module">
    <h2 className="module__title">
      <link to={`/${module.name}`}>{module.name}</link>
    </h2>
    <p className="module__description">{module.description}</p>
    <ul className="content__items">
      {map(Type(module.name), module.typeDeclarations)}
      {map(Alias(module.name), module.aliases)}
      {map(Interface(module.name), module.interfaces)}
      {map(Instance(module.name), module.instances)}
      {map(Expression(module.name), module.expressions)}
    </ul>
  </div>

ContentView :: PathResult -> Element
ContentView = where
  is ModuleResult modules:
    <div>{map(ModuleView, modules)}</div>

  is ExpressionResult moduleName exp:
    <ul className="content__items">{Expression(moduleName, exp)}</ul>

  is TypeResult moduleName t:
    <ul className="content__items">{Type(moduleName, t)}</ul>

  is AliasResult moduleName t:
    <ul className="content__items">{Alias(moduleName, t)}</ul>

  is InterfaceResult moduleName t:
    <ul className="content__items">{Interface(moduleName, t)}</ul>

  is InstanceResult moduleName t:
    <ul className="content__items">{Instance(moduleName, t)}</ul>

DocApp :: State -> Element
DocApp = (state) => {
  modulesInPath = getModulesToShow(state)
  pathResult = processPath(state)
  return (
    <div className="documentation">
      {Header(())}
      {SideMenu(state.modules)}
      <main className="documentation__content">
        {Breadcrumbs(state)}
        {ContentView(pathResult)}
      </main>
    </div>
  )
}

onUrlChanged(syncAction((state, event) => where(event)
  is UrlEvent { url }: { ...state, path: URL.decode(url) }
))

render(DocApp, initialState, "app")
