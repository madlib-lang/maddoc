import L from "List"
import J from "Json"
import { Right } from "Either"
import docJson from "./documentation.json"
import {
  Action,
  Element,
  UrlEvent,
  onInput,
  div,
  h2,
  input,
  className,
  onUrlChanged,
  syncAction,
  getUrl,
  text,
  p,
  placeholder,
  InputEvent,
  render,
  inputType,
  header,
  main,
  ul
} from "MadUI"
import IO from "IO"
import { always } from "Function"
import {} from "Compare"

import {
  State
} from "./State"

import { Expression } from "./Views/Expression"
import { SideMenu } from "./Views/SideMenu"
// import { Type } from "./Views/Type"
// import { Alias } from "./Views/Alias"
// import { Interface } from "./Views/Interface"
// import { Instance } from "./Views/Instance"

import {
  parser,
  Module,
  Expression
} from "./Parser/Documentation"

import { computeViewType, getModulesToShow, ExpressionViewType, ModuleViewType, ViewType } from "./PathResolver"

parsedDocumentation = J.parse(parser, docJson)

initialState :: State
initialState = where(parsedDocumentation)
  is Right modules: {
    modules,
    search: "",
    path: getUrl(())
  }


handleInput :: Action State
handleInput = (state, event) => where(event)
  is InputEvent e: [of(always({ ...state, search: e.target.value }))]


ModuleView :: Module -> Element
ModuleView = (module) =>
  <div className="module">
    <h2 className="module__title">{module.name}</h2>
    <p className="module__description">{module.description}</p>
    <ul>
      {map(Expression(module.name), module.expressions)}
    </ul>
  </div>

ContentView :: ViewType -> Element
ContentView = where
  is ModuleViewType modules:
    <main className="documentation__content">
      {map(ModuleView, modules)}
    </main>

  is ExpressionViewType moduleName exp:
    <main className="documentation__content">
      <ul>{Expression(moduleName, exp)}</ul>
    </main>

DocApp :: State -> Element
DocApp = (state) => {
  modulesInPath = getModulesToShow(state)
  vt = computeViewType(state)

  return (
    <div className="documentation">
      <header className="documentation__header">
        <input inputType="text" placeholder="What are you looking for?" className="search-field" onInput={handleInput} />
      </header>
      {SideMenu(modulesInPath)}
      {ContentView(vt)}
    </div>
  )
}

onUrlChanged(syncAction((state, event) => where(event)
  is UrlEvent { url }: { ...state, path: url }
))

render(DocApp, initialState, "app")
